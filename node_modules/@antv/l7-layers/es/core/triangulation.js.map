{"version":3,"sources":["../../src/core/triangulation.ts"],"names":["lngLatToMeters","earcut","vec3","ExtrudePolyline","calculteCentroid","extrudePolygon","extrude_PolygonNormal","fillPolygon","geometryShape","GeometryCache","PointFillTriangulation","feature","coordinates","vertices","indices","size","length","PointExtrudeTriangulation","shape","getGeometry","positions","index","normals","PointImageTriangulation","LineTriangulation","path","Array","isArray","line","dash","join","linebuffer","extrude","polygonTriangulation","flattengeo","flatten","dimensions","holes","PolygonExtrudeTriangulation","HeatmapGridTriangulation","getHeatmapGeometry","RasterImageTriangulation","indexs","LineArcTriangulation","segNum","indexArray","i","push","map","v","HeatmapTriangulation","dir","addDir","dir1","dir2","dir3","needFlat","cylinder","geometry","computeVertexNormals","dim","Float32Array","vA","vB","vC","cb","create","ab","normal","li","p1","p2","p3","ax","ay","pA","fromValues","bx","by","pB","cx","cy","pC","sub","cross","normalizeNormals","newNormal","normalize","set","checkIsClosed","points","shape3d","circle","indexOf","dirX","dirY","x","y"],"mappings":";;AACA,SAAuBA,cAAvB,QAA6C,gBAA7C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,OAAOC,cAAP,IACEC,qBADF,EAEEC,WAFF,QAIO,iBAJP;AAKA,SACEC,aADF,QAKO,cALP;AAUA,IAAMC,aAA6B,GAAG,EAAtC;AAKA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAAyD;AAC9D,MAAMC,WAAW,GAAGR,gBAAgB,CAACO,OAAO,CAACC,WAAT,CAApC;AACA,SAAO;AACLC,IAAAA,QAAQ,+BAAMD,WAAN,sBAAsBA,WAAtB,sBAAsCA,WAAtC,sBAAsDA,WAAtD,EADH;AAELE,IAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAFJ;AAGLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AAHb,GAAP;AAKD;AAMD,OAAO,SAASC,yBAAT,CAAmCN,OAAnC,EAA4D;AAAA,MACzDO,KADyD,GAC/CP,OAD+C,CACzDO,KADyD;;AAAA,qBAE3BC,WAAW,CAC/CD,KAD+C,EAE/C,KAF+C,CAFgB;AAAA,MAEzDE,SAFyD,gBAEzDA,SAFyD;AAAA,MAE9CC,KAF8C,gBAE9CA,KAF8C;AAAA,MAEvCC,OAFuC,gBAEvCA,OAFuC;;AAMjE,SAAO;AACLT,IAAAA,QAAQ,EAAEO,SADL;AAELN,IAAAA,OAAO,EAAEO,KAFJ;AAGLC,IAAAA,OAAO,EAAPA,OAHK;AAILP,IAAAA,IAAI,EAAE;AAJD,GAAP;AAMD;AAMD,OAAO,SAASQ,uBAAT,CAAiCZ,OAAjC,EAA0D;AAC/D,MAAMC,WAAW,GAAGR,gBAAgB,CAACO,OAAO,CAACC,WAAT,CAApC;AACA,SAAO;AACLC,IAAAA,QAAQ,qBAAMD,WAAN,CADH;AAELE,IAAAA,OAAO,EAAE,CAAC,CAAD,CAFJ;AAGLC,IAAAA,IAAI,EAAEH,WAAW,CAACI;AAHb,GAAP;AAKD;AAMD,OAAO,SAASQ,iBAAT,CAA2Bb,OAA3B,EAAoD;AAAA,MACjDC,WADiD,GACjCD,OADiC,CACjDC,WADiD;AAEzD,MAAIa,IAAI,GAAGb,WAAX;;AACA,MAAIc,KAAK,CAACC,OAAN,CAAcF,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAd,CAAJ,EAA+B;AAC7BA,IAAAA,IAAI,GAAGb,WAAW,CAAC,CAAD,CAAlB;AACD;;AACD,MAAMgB,IAAI,GAAG,IAAIzB,eAAJ,CAAoB;AAC/B0B,IAAAA,IAAI,EAAE,IADyB;AAE/BC,IAAAA,IAAI,EAAE;AAFyB,GAApB,CAAb;AAKA,MAAMC,UAAU,GAAGH,IAAI,CAACI,OAAL,CAAaP,IAAb,CAAnB;AACA,SAAO;AACLZ,IAAAA,QAAQ,EAAEkB,UAAU,CAACX,SADhB;AAELN,IAAAA,OAAO,EAAEiB,UAAU,CAACjB,OAFf;AAGLQ,IAAAA,OAAO,EAAES,UAAU,CAACT,OAHf;AAILP,IAAAA,IAAI,EAAE;AAJD,GAAP;AAMD;AAED,OAAO,SAASkB,oBAAT,CAA8BtB,OAA9B,EAAuD;AAAA,MACpDC,WADoD,GACpCD,OADoC,CACpDC,WADoD;AAE5D,MAAMsB,UAAU,GAAGjC,MAAM,CAACkC,OAAP,CAAevB,WAAf,CAAnB;AAF4D,MAGpDC,QAHoD,GAGpBqB,UAHoB,CAGpDrB,QAHoD;AAAA,MAG1CuB,UAH0C,GAGpBF,UAHoB,CAG1CE,UAH0C;AAAA,MAG9BC,KAH8B,GAGpBH,UAHoB,CAG9BG,KAH8B;AAI5D,SAAO;AACLvB,IAAAA,OAAO,EAAEb,MAAM,CAACY,QAAD,EAAWwB,KAAX,EAAkBD,UAAlB,CADV;AAELvB,IAAAA,QAAQ,EAARA,QAFK;AAGLE,IAAAA,IAAI,EAAEqB;AAHD,GAAP;AAKD;AAED,OAAO,SAASE,2BAAT,CAAqC3B,OAArC,EAA8D;AACnE,MAAMC,WAAW,GAAGD,OAAO,CAACC,WAA5B;;AADmE,8BAE7BN,qBAAqB,CACzDM,WADyD,EAEzD,IAFyD,CAFQ;AAAA,MAE3DQ,SAF2D,yBAE3DA,SAF2D;AAAA,MAEhDC,KAFgD,yBAEhDA,KAFgD;AAAA,MAEzCC,OAFyC,yBAEzCA,OAFyC;;AAOnE,SAAO;AACLT,IAAAA,QAAQ,EAAEO,SADL;AAELN,IAAAA,OAAO,EAAEO,KAFJ;AAGLC,IAAAA,OAAO,EAAPA,OAHK;AAILP,IAAAA,IAAI,EAAE;AAJD,GAAP;AAMD;AAED,OAAO,SAASwB,wBAAT,CAAkC5B,OAAlC,EAA2D;AAAA,MACxDO,KADwD,GAC9CP,OAD8C,CACxDO,KADwD;;AAAA,4BAEnCsB,kBAAkB,CAACtB,KAAD,CAFiB;AAAA,MAExDE,SAFwD,uBAExDA,SAFwD;AAAA,MAE7CC,KAF6C,uBAE7CA,KAF6C;;AAGhE,SAAO;AACLR,IAAAA,QAAQ,EAAEO,SADL;AAELN,IAAAA,OAAO,EAAEO,KAFJ;AAGLN,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAMD,OAAO,SAAS0B,wBAAT,CAAkC9B,OAAlC,EAA2D;AAChE,MAAMC,WAAW,GAAGD,OAAO,CAACC,WAA5B;AAEA,MAAMQ,SAAmB,gCACpBR,WAAW,CAAC,CAAD,CADS,IAEvB,CAFuB,EAGvB,CAHuB,EAIvB,CAJuB,EAKvBA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CALuB,EAMvBA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CANuB,EAOvB,CAPuB,EAQvB,CARuB,EASvB,CATuB,sBAUpBA,WAAW,CAAC,CAAD,CAVS,IAWvB,CAXuB,EAYvB,CAZuB,EAavB,CAbuB,sBAcpBA,WAAW,CAAC,CAAD,CAdS,IAevB,CAfuB,EAgBvB,CAhBuB,EAiBvB,CAjBuB,sBAkBpBA,WAAW,CAAC,CAAD,CAlBS,IAmBvB,CAnBuB,EAoBvB,CApBuB,EAqBvB,CArBuB,EAsBvBA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAtBuB,EAuBvBA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAvBuB,EAwBvB,CAxBuB,EAyBvB,CAzBuB,EA0BvB,CA1BuB,EAAzB;AA4BA,MAAM8B,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAf;AACA,SAAO;AACL7B,IAAAA,QAAQ,EAAEO,SADL;AAELN,IAAAA,OAAO,EAAE4B,MAFJ;AAGL3B,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAMD,OAAO,SAAS4B,oBAAT,CAA8BhC,OAA9B,EAAuD;AAC5D,MAAMiC,MAAM,GAAG,EAAf;AACA,MAAMhC,WAAW,GAAGD,OAAO,CAACC,WAA5B;AACA,MAAMQ,SAAS,GAAG,EAAlB;AACA,MAAMyB,UAAU,GAAG,EAAnB;;AAJ4D,6BAKnDC,CALmD;AAQ1D1B,IAAAA,SAAS,CAAC2B,IAAV,CACED,CADF,EAEE,CAFF,EAGEA,CAHF,EAIElC,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAJF,EAKEA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CALF,EAMEA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CANF,EAOEA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAPF,EAQEkC,CARF,EASE,CAAC,CATH,EAUEA,CAVF,EAWElC,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAXF,EAYEA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAZF,EAaEA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAbF,EAcEA,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAdF;;AAgBA,QAAIkC,CAAC,KAAKF,MAAM,GAAG,CAAnB,EAAsB;AACpBC,MAAAA,UAAU,CAACE,IAAX,OAAAF,UAAU,qBACL,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmBG,GAAnB,CAAuB,UAACC,CAAD,EAAO;AAC/B,eAAOH,CAAC,GAAG,CAAJ,GAAQG,CAAf;AACD,OAFE,CADK,EAAV;AAKD;AA9ByD;;AAK5D,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAAA,UAAxBA,CAAwB;AA0BhC;;AACD,SAAO;AACLjC,IAAAA,QAAQ,EAAEO,SADL;AAELN,IAAAA,OAAO,EAAE+B,UAFJ;AAGL9B,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED,OAAO,SAASmC,oBAAT,CAA8BvC,OAA9B,EAAuD;AAC5D,MAAMC,WAAW,GAAGD,OAAO,CAACC,WAA5B;;AACA,MAAIA,WAAW,CAACI,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BJ,IAAAA,WAAW,CAACmC,IAAZ,CAAiB,CAAjB;AACD;;AACD,MAAMhC,IAAI,GAAGJ,OAAO,CAACI,IAArB;AACA,MAAMoC,GAAG,GAAGC,MAAM,CAAC,CAAC,CAAF,EAAK,CAAL,CAAlB;AACA,MAAMC,IAAI,GAAGD,MAAM,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACA,MAAME,IAAI,GAAGF,MAAM,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAnB;AACA,MAAMG,IAAI,GAAGH,MAAM,CAAC,CAAD,EAAI,CAAC,CAAL,CAAnB;AAEA,MAAMhC,SAAS,gCACVR,WADU,sBAEVuC,GAFU,sBAGVvC,WAHU,sBAIV0C,IAJU,sBAKV1C,WALU,sBAMV2C,IANU,sBAOV3C,WAPU,sBAQVyC,IARU,EAAf;AAUA,MAAMR,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAnB;AACA,SAAO;AACLhC,IAAAA,QAAQ,EAAEO,SADL;AAELN,IAAAA,OAAO,EAAE+B,UAFJ;AAGL9B,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;;AAMD,SAASI,WAAT,CAAqBD,KAArB,EAA4E;AAAA,MAAnCsC,QAAmC,uEAAxB,KAAwB;;AAC1E,MAAI/C,aAAa,IAAIA,aAAa,CAACS,KAAD,CAAlC,EAA2C;AACzC,WAAOT,aAAa,CAACS,KAAD,CAApB;AACD;;AACD,MAAMO,IAAI,GAAGjB,aAAa,CAACU,KAAD,CAAb,GACTV,aAAa,CAACU,KAAD,CAAb,EADS,GAETV,aAAa,CAACiD,QAAd,EAFJ;AAGA,MAAMC,QAAQ,GAAGpD,qBAAqB,CAAC,CAACmB,IAAD,CAAD,EAAS+B,QAAT,CAAtC;AACA/C,EAAAA,aAAa,CAACS,KAAD,CAAb,GAAuBwC,QAAvB;AACA,SAAOA,QAAP;AACD;;AAED,SAASC,oBAAT,CACEvC,SADF,EAEEyB,UAFF,EAKE;AAAA,MAFAe,GAEA,uEAFc,CAEd;AAAA,MADAJ,QACA,uEADoB,KACpB;AACA,MAAMlC,OAAO,GAAG,IAAIuC,YAAJ,CAAkBzC,SAAS,CAACJ,MAAV,GAAmB4C,GAApB,GAA2B,CAA5C,CAAhB;AACA,MAAIE,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAMC,EAAE,GAAG/D,IAAI,CAACgE,MAAL,EAAX;AACA,MAAMC,EAAE,GAAGjE,IAAI,CAACgE,MAAL,EAAX;AACA,MAAME,MAAM,GAAGlE,IAAI,CAACgE,MAAL,EAAf;;AACA,OAAK,IAAIpB,CAAC,GAAG,CAAR,EAAWuB,EAAE,GAAGxB,UAAU,CAAC7B,MAAhC,EAAwC8B,CAAC,GAAGuB,EAA5C,EAAgDvB,CAAC,IAAI,CAArD,EAAwD;AACtDgB,IAAAA,EAAE,GAAGjB,UAAU,CAACC,CAAC,GAAG,CAAL,CAAV,GAAoB,CAAzB;AACAiB,IAAAA,EAAE,GAAGlB,UAAU,CAACC,CAAC,GAAG,CAAL,CAAV,GAAoB,CAAzB;AACAkB,IAAAA,EAAE,GAAGnB,UAAU,CAACC,CAAC,GAAG,CAAL,CAAV,GAAoB,CAAzB;AACA,QAAIwB,EAAE,GAAG,CAAClD,SAAS,CAAC0C,EAAD,CAAV,EAAgB1C,SAAS,CAAC0C,EAAE,GAAG,CAAN,CAAzB,CAAT;AACA,QAAIS,EAAE,GAAG,CAACnD,SAAS,CAAC2C,EAAD,CAAV,EAAgB3C,SAAS,CAAC2C,EAAE,GAAG,CAAN,CAAzB,CAAT;AACA,QAAIS,EAAE,GAAG,CAACpD,SAAS,CAAC4C,EAAD,CAAV,EAAgB5C,SAAS,CAAC4C,EAAE,GAAG,CAAN,CAAzB,CAAT;;AACA,QAAIR,QAAJ,EAAc;AACZc,MAAAA,EAAE,GAAGtE,cAAc,CAACsE,EAAD,CAAnB;AACAC,MAAAA,EAAE,GAAGvE,cAAc,CAACuE,EAAD,CAAnB;AACAC,MAAAA,EAAE,GAAGxE,cAAc,CAACwE,EAAD,CAAnB;AACD;;AAXqD,aAYrCF,EAZqC;AAAA;AAAA,QAY/CG,EAZ+C;AAAA,QAY3CC,EAZ2C;;AAatD,QAAMC,EAAE,GAAGzE,IAAI,CAAC0E,UAAL,CAAgBH,EAAhB,EAAoBC,EAApB,EAAwBtD,SAAS,CAAC0C,EAAE,GAAG,CAAN,CAAjC,CAAX;;AAbsD,cAcrCS,EAdqC;AAAA;AAAA,QAc/CM,EAd+C;AAAA,QAc3CC,EAd2C;;AAetD,QAAMC,EAAE,GAAG7E,IAAI,CAAC0E,UAAL,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwB1D,SAAS,CAAC2C,EAAE,GAAG,CAAN,CAAjC,CAAX;;AAfsD,cAgBrCS,EAhBqC;AAAA;AAAA,QAgB/CQ,EAhB+C;AAAA,QAgB3CC,EAhB2C;;AAiBtD,QAAMC,EAAE,GAAGhF,IAAI,CAAC0E,UAAL,CAAgBI,EAAhB,EAAoBC,EAApB,EAAwB7D,SAAS,CAAC4C,EAAE,GAAG,CAAN,CAAjC,CAAX;AACA9D,IAAAA,IAAI,CAACiF,GAAL,CAASlB,EAAT,EAAaiB,EAAb,EAAiBH,EAAjB;AACA7E,IAAAA,IAAI,CAACiF,GAAL,CAAShB,EAAT,EAAaQ,EAAb,EAAiBI,EAAjB;AACA7E,IAAAA,IAAI,CAACkF,KAAL,CAAWhB,MAAX,EAAmBH,EAAnB,EAAuBE,EAAvB;AACA7C,IAAAA,OAAO,CAACwC,EAAD,CAAP,IAAeG,EAAE,CAAC,CAAD,CAAjB;AACA3C,IAAAA,OAAO,CAACwC,EAAE,GAAG,CAAN,CAAP,IAAmBG,EAAE,CAAC,CAAD,CAArB;AACA3C,IAAAA,OAAO,CAACwC,EAAE,GAAG,CAAN,CAAP,IAAmBG,EAAE,CAAC,CAAD,CAArB;AACA3C,IAAAA,OAAO,CAACyC,EAAD,CAAP,IAAeE,EAAE,CAAC,CAAD,CAAjB;AACA3C,IAAAA,OAAO,CAACyC,EAAE,GAAG,CAAN,CAAP,IAAmBE,EAAE,CAAC,CAAD,CAArB;AACA3C,IAAAA,OAAO,CAACyC,EAAE,GAAG,CAAN,CAAP,IAAmBE,EAAE,CAAC,CAAD,CAArB;AACA3C,IAAAA,OAAO,CAAC0C,EAAD,CAAP,IAAeC,EAAE,CAAC,CAAD,CAAjB;AACA3C,IAAAA,OAAO,CAAC0C,EAAE,GAAG,CAAN,CAAP,IAAmBC,EAAE,CAAC,CAAD,CAArB;AACA3C,IAAAA,OAAO,CAAC0C,EAAE,GAAG,CAAN,CAAP,IAAmBC,EAAE,CAAC,CAAD,CAArB;AACD;;AACDoB,EAAAA,gBAAgB,CAAC/D,OAAD,CAAhB;AACA,SAAOA,OAAP;AACD;;AAED,SAAS+D,gBAAT,CAA0B/D,OAA1B,EAAiD;AAC/C,OAAK,IAAIwB,CAAC,GAAG,CAAR,EAAWuB,EAAE,GAAG/C,OAAO,CAACN,MAA7B,EAAqC8B,CAAC,GAAGuB,EAAzC,EAA6CvB,CAAC,IAAI,CAAlD,EAAqD;AACnD,QAAMsB,MAAM,GAAGlE,IAAI,CAAC0E,UAAL,CAAgBtD,OAAO,CAACwB,CAAD,CAAvB,EAA4BxB,OAAO,CAACwB,CAAC,GAAG,CAAL,CAAnC,EAA4CxB,OAAO,CAACwB,CAAC,GAAG,CAAL,CAAnD,CAAf;AACA,QAAMwC,SAAS,GAAGpF,IAAI,CAACgE,MAAL,EAAlB;AACAhE,IAAAA,IAAI,CAACqF,SAAL,CAAeD,SAAf,EAA0BlB,MAA1B;AACA9C,IAAAA,OAAO,CAACkE,GAAR,CAAYF,SAAZ,EAAuBxC,CAAvB;AACD;AACF;;AAED,SAAS2C,aAAT,CAAuBC,MAAvB,EAA6C;AAC3C,MAAMpB,EAAE,GAAGoB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AACA,MAAMnB,EAAE,GAAGmB,MAAM,CAAC,CAAD,CAAN,CAAUA,MAAM,CAAC,CAAD,CAAN,CAAU1E,MAAV,GAAmB,CAA7B,CAAX;AACA,SAAOsD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAAZ,IAAmBD,EAAE,CAAC,CAAD,CAAF,KAAUC,EAAE,CAAC,CAAD,CAAtC;AACD;;AAED,SAAS/B,kBAAT,CAA4BtB,KAA5B,EAA+E;AAC7E,MAAMyE,OAAO,GAAG,CACd,UADc,EAEd,gBAFc,EAGd,eAHc,EAId,cAJc,CAAhB;AAMA,MAAMlE,IAAI,GAAGjB,aAAa,CAACU,KAAD,CAAb,GACTV,aAAa,CAACU,KAAD,CAAb,EADS,GAETV,aAAa,CAACoF,MAAd,EAFJ;AAGA,MAAMlC,QAAQ,GACZiC,OAAO,CAACE,OAAR,CAAgB3E,KAAhB,MAA2B,CAAC,CAA5B,GACIX,WAAW,CAAC,CAACkB,IAAD,CAAD,CADf,GAEIpB,cAAc,CAAC,CAACoB,IAAD,CAAD,CAHpB;AAKA,SAAOiC,QAAP;AACD;;AAED,SAASN,MAAT,CAAgB0C,IAAhB,EAA8BC,IAA9B,EAA4C;AAC1C,MAAMC,CAAC,GAAG,CAACF,IAAI,GAAG,CAAR,IAAa,CAAvB;AACA,MAAMG,CAAC,GAAG,CAACF,IAAI,GAAG,CAAR,IAAa,CAAvB;AACA,SAAO,CAACC,CAAD,EAAIC,CAAJ,CAAP;AACD","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport { aProjectFlat, lngLatToMeters } from '@antv/l7-utils';\nimport earcut from 'earcut';\nimport { vec3 } from 'gl-matrix';\nimport ExtrudePolyline from '../utils/extrude_polyline';\nimport { calculteCentroid } from '../utils/geo';\nimport extrudePolygon, {\n  extrude_PolygonNormal,\n  fillPolygon,\n  IExtrudeGeomety,\n} from './shape/extrude';\nimport {\n  geometryShape,\n  IPosition,\n  ShapeType2D,\n  ShapeType3D,\n} from './shape/Path';\ntype IShape = ShapeType2D & ShapeType3D;\ninterface IGeometryCache {\n  [key: string]: IExtrudeGeomety;\n}\nconst GeometryCache: IGeometryCache = {};\n/**\n * 计算2D 填充点图顶点\n * @param feature 映射feature\n */\nexport function PointFillTriangulation(feature: IEncodeFeature) {\n  const coordinates = calculteCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates, ...coordinates, ...coordinates, ...coordinates],\n    indices: [0, 1, 2, 2, 3, 0],\n    size: coordinates.length,\n  };\n}\n\n/**\n * 计算3D 拉伸点图\n * @param feature 映射feature\n */\nexport function PointExtrudeTriangulation(feature: IEncodeFeature) {\n  const { shape } = feature;\n  const { positions, index, normals } = getGeometry(\n    shape as ShapeType3D,\n    false,\n  );\n  return {\n    vertices: positions,\n    indices: index,\n    normals,\n    size: 5,\n  };\n}\n\n/**\n * 计算图片标注\n * @param feature 映射feature\n */\nexport function PointImageTriangulation(feature: IEncodeFeature) {\n  const coordinates = calculteCentroid(feature.coordinates);\n  return {\n    vertices: [...coordinates],\n    indices: [0],\n    size: coordinates.length,\n  };\n}\n\n/**\n * 线三角化\n * @param feature 映射feature\n */\nexport function LineTriangulation(feature: IEncodeFeature) {\n  const { coordinates } = feature;\n  let path = coordinates as number[][][] | number[][];\n  if (Array.isArray(path[0][0])) {\n    path = coordinates[0] as number[][];\n  }\n  const line = new ExtrudePolyline({\n    dash: true,\n    join: 'bevel', //\n  });\n\n  const linebuffer = line.extrude(path as number[][]);\n  return {\n    vertices: linebuffer.positions, // [ x,y,z, distance, miter,total ]\n    indices: linebuffer.indices,\n    normals: linebuffer.normals,\n    size: 6,\n  };\n}\n\nexport function polygonTriangulation(feature: IEncodeFeature) {\n  const { coordinates } = feature;\n  const flattengeo = earcut.flatten(coordinates as number[][][]);\n  const { vertices, dimensions, holes } = flattengeo;\n  return {\n    indices: earcut(vertices, holes, dimensions),\n    vertices,\n    size: dimensions,\n  };\n}\n\nexport function PolygonExtrudeTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as IPosition[][];\n  const { positions, index, normals } = extrude_PolygonNormal(\n    coordinates,\n    true,\n  );\n\n  return {\n    vertices: positions, // [ x, y, z, uv.x,uv.y ]\n    indices: index,\n    normals,\n    size: 5,\n  };\n}\n\nexport function HeatmapGridTriangulation(feature: IEncodeFeature) {\n  const { shape } = feature;\n  const { positions, index } = getHeatmapGeometry(shape as IShape);\n  return {\n    vertices: positions, // [ x, y, z ] 多边形顶点\n    indices: index,\n    size: 3,\n  };\n}\n\n/**\n * 图片图层顶点构造\n * @param feature 数据\n */\nexport function RasterImageTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as IPosition[];\n  // [ x, y, z. uv.x, uv.y]\n  const positions: number[] = [\n    ...coordinates[0],\n    0,\n    0,\n    1,\n    coordinates[1][0],\n    coordinates[0][1],\n    0,\n    1,\n    1,\n    ...coordinates[1],\n    0,\n    1,\n    0,\n    ...coordinates[0],\n    0,\n    0,\n    1,\n    ...coordinates[1],\n    0,\n    1,\n    0,\n    coordinates[0][0],\n    coordinates[1][1],\n    0,\n    0,\n    0,\n  ];\n  const indexs = [0, 1, 2, 3, 4, 5];\n  return {\n    vertices: positions,\n    indices: indexs,\n    size: 5,\n  };\n}\n/**\n *  计算3D弧线顶点\n * @param feature 映射数据\n * @param segNum 弧线线段数\n */\nexport function LineArcTriangulation(feature: IEncodeFeature) {\n  const segNum = 30;\n  const coordinates = feature.coordinates as IPosition[];\n  const positions = [];\n  const indexArray = [];\n  for (let i = 0; i < segNum; i++) {\n    // 上线两个顶点\n    // [ x, y, z, sx,sy, tx,ty]\n    positions.push(\n      i,\n      1,\n      i,\n      coordinates[0][0],\n      coordinates[0][1],\n      coordinates[1][0],\n      coordinates[1][1],\n      i,\n      -1,\n      i,\n      coordinates[0][0],\n      coordinates[0][1],\n      coordinates[1][0],\n      coordinates[1][1],\n    );\n    if (i !== segNum - 1) {\n      indexArray.push(\n        ...[0, 1, 2, 1, 3, 2].map((v) => {\n          return i * 2 + v;\n        }),\n      );\n    }\n  }\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 7,\n  };\n}\n\nexport function HeatmapTriangulation(feature: IEncodeFeature) {\n  const coordinates = feature.coordinates as number[];\n  if (coordinates.length === 2) {\n    coordinates.push(0);\n  }\n  const size = feature.size as number;\n  const dir = addDir(-1, 1);\n  const dir1 = addDir(1, 1);\n  const dir2 = addDir(-1, -1);\n  const dir3 = addDir(1, -1);\n  // [x,y,z, dirx ,diry, weight]\n  const positions = [\n    ...coordinates,\n    ...dir,\n    ...coordinates,\n    ...dir2,\n    ...coordinates,\n    ...dir3,\n    ...coordinates,\n    ...dir1,\n  ];\n  const indexArray = [0, 1, 2, 3, 0, 2];\n  return {\n    vertices: positions,\n    indices: indexArray,\n    size: 5,\n  };\n}\n\n/**\n * 点图层3d geomerty\n * @param shape 3D形状\n */\nfunction getGeometry(shape: ShapeType3D, needFlat = false): IExtrudeGeomety {\n  if (GeometryCache && GeometryCache[shape]) {\n    return GeometryCache[shape];\n  }\n  const path = geometryShape[shape]\n    ? geometryShape[shape]()\n    : geometryShape.cylinder();\n  const geometry = extrude_PolygonNormal([path], needFlat);\n  GeometryCache[shape] = geometry;\n  return geometry;\n}\n\nfunction computeVertexNormals(\n  positions: number[],\n  indexArray: number[],\n  dim: number = 3,\n  needFlat: boolean = false,\n) {\n  const normals = new Float32Array((positions.length / dim) * 3);\n  let vA: number;\n  let vB: number;\n  let vC: number;\n  const cb = vec3.create();\n  const ab = vec3.create();\n  const normal = vec3.create();\n  for (let i = 0, li = indexArray.length; i < li; i += 3) {\n    vA = indexArray[i + 0] * 3;\n    vB = indexArray[i + 1] * 3;\n    vC = indexArray[i + 2] * 3;\n    let p1 = [positions[vA], positions[vA + 1]];\n    let p2 = [positions[vB], positions[vB + 1]];\n    let p3 = [positions[vC], positions[vC + 1]];\n    if (needFlat) {\n      p1 = lngLatToMeters(p1);\n      p2 = lngLatToMeters(p2);\n      p3 = lngLatToMeters(p3);\n    }\n    const [ax, ay] = p1;\n    const pA = vec3.fromValues(ax, ay, positions[vA + 2]);\n    const [bx, by] = p2;\n    const pB = vec3.fromValues(bx, by, positions[vB + 2]);\n    const [cx, cy] = p3;\n    const pC = vec3.fromValues(cx, cy, positions[vC + 2]);\n    vec3.sub(cb, pC, pB);\n    vec3.sub(ab, pA, pB);\n    vec3.cross(normal, cb, ab);\n    normals[vA] += cb[0];\n    normals[vA + 1] += cb[1];\n    normals[vA + 2] += cb[2];\n    normals[vB] += cb[0];\n    normals[vB + 1] += cb[1];\n    normals[vB + 2] += cb[2];\n    normals[vC] += cb[0];\n    normals[vC + 1] += cb[1];\n    normals[vC + 2] += cb[2];\n  }\n  normalizeNormals(normals);\n  return normals;\n}\n\nfunction normalizeNormals(normals: Float32Array) {\n  for (let i = 0, li = normals.length; i < li; i += 3) {\n    const normal = vec3.fromValues(normals[i], normals[i + 1], normals[i + 2]);\n    const newNormal = vec3.create();\n    vec3.normalize(newNormal, normal);\n    normals.set(newNormal, i);\n  }\n}\n\nfunction checkIsClosed(points: number[][][]) {\n  const p1 = points[0][0];\n  const p2 = points[0][points[0].length - 1];\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\n\nfunction getHeatmapGeometry(shape: ShapeType2D | ShapeType3D): IExtrudeGeomety {\n  const shape3d = [\n    'cylinder',\n    'triangleColumn',\n    'hexagonColumn',\n    'squareColumn',\n  ];\n  const path = geometryShape[shape]\n    ? geometryShape[shape]()\n    : geometryShape.circle();\n  const geometry =\n    shape3d.indexOf(shape) === -1\n      ? fillPolygon([path])\n      : extrudePolygon([path]);\n  // const geometry = fillPolygon([path]);\n  return geometry;\n}\n// 热力图计算范围\nfunction addDir(dirX: number, dirY: number) {\n  const x = (dirX + 1) / 2;\n  const y = (dirY + 1) / 2;\n  return [x, y];\n}\n"],"file":"triangulation.js"}